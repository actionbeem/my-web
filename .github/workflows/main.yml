name: CI/CD

on:
  push:
    branches: [master]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2 # git 소스 내려받기

      # Node 17 버전을 사용합니다.
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: "17"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Run test command
        run: npm run test:report

      # 테스트 결과를 담은 xml 파일을 레포트로 변환합니다.
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: test-results
          path: junit.xml
          fail-on-error: "false"
          reporter: jest-junit # Format of test results
          token: ${{ secrets.GITHUB_TOKEN }}

  build-image:
    needs: test-frontend
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2 # git 소스 내려받기

      - name: Login to Docker Hub
        uses: docker/login-action@v1 # docker login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2 # docker image build & push
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/actions-test:${{ github.sha }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  cd-pipeline:
    needs: build-image
    name: continuos deploy
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master # ec2 ssh 접속 후 docker 실행
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            docker pull actionbeem/actions-test:${{ github.sha }}
            docker stop my-web
            docker rm my-web
            docker rmi $(docker images -q)
            docker run -d --name my-web -p 80:80 actionbeem/actions-test:${{ github.sha }}
